не спомням конкретно, но ако можеш да видиш в историята на нашите с теб чатове, това го правихме - да може да се работи с регистриран потребител или с анонимен (сесия). виждам, че в models сме задали
class Cart(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True)  # Ако потребителят е логнат
    session_id = models.CharField(max_length=36, null=True, blank=True)  # За анонимен потребител (уникален ключ)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
т.е. Cart моделът има и поле user и поле session_id
искам тази функционалност да се запази. промени работата с количката според това
Чудесно, че уточни!
Виждам, че моделът Cart поддържа и регистрирани потребители (user), и анонимни (session_id).
Това е най-гъвкавият вариант и ще го реализирам така, че количката да работи и при двата случая.

Как трябва да работи логиката?
Ако user е автентикиран:
Използваме Cart.objects.get_or_create(user=request.user)

Ако user е анонимен:
Използваме Cart.objects.get_or_create(session_id=session_id), където session_id е уникалният идентификатор на сесията.

Унифицирана функция за достъп до количката
За да избегнем дублиране на код, ще добавим помощна функция:

# Във views.py (или utils.py)
def get_or_create_cart(request):
    if request.user.is_authenticated:
        cart, created = Cart.objects.get_or_create(user=request.user)
    else:
        session_id = request.session.session_key
        if not session_id:
            request.session.create()
            session_id = request.session.session_key
        cart, created = Cart.objects.get_or_create(session_id=session_id)
    return cart
Как да се ползва това във всички изгледи за количката
1. Във views.py
update_cart:
from django.shortcuts import get_object_or_404, redirect
from .models import Product, CartItem
from .forms import UpdateQuantityForm

def update_cart(request, product_id):
    cart = get_or_create_cart(request)
    product = get_object_or_404(Product, id=product_id)
    item = get_object_or_404(CartItem, cart=cart, product=product)
    if request.method == 'POST':
        form = UpdateQuantityForm(request.POST)
        if form.is_valid():
            quantity = form.cleaned_data['quantity']
            item.quantity = quantity
            item.save()
    return redirect('cart')
remove_from_cart:
from .forms import RemoveFromCartForm

def remove_from_cart(request, product_id):
    cart = get_or_create_cart(request)
    product = get_object_or_404(Product, id=product_id)
    item = get_object_or_404(CartItem, cart=cart, product=product)
    if request.method == 'POST':
        form = RemoveFromCartForm(request.POST)
        if form.is_valid():
            item.delete()
    return redirect('cart')
cart_view:
from .forms import UpdateQuantityForm, RemoveFromCartForm

def cart_view(request):
    cart = get_or_create_cart(request)
    cart_products = CartItem.objects.filter(cart=cart)
    total = sum(item.product.price * item.quantity for item in cart_products)
    update_quantity_forms = {item.product.id: UpdateQuantityForm(initial={'quantity': item.quantity}) for item in cart_products}
    remove_from_cart_form = RemoveFromCartForm()
    context = {
        'cart_products': cart_products,
        'total': total,
        'update_quantity_forms': update_quantity_forms,
        'remove_from_cart_form': remove_from_cart_form,
    }
    return render(request, 'cart.html', context)
2. Във forms.py
Вече имаш нужните форми, но за яснота:

from django import forms

class UpdateQuantityForm(forms.Form):
    quantity = forms.IntegerField(min_value=1, label='Количество')

class RemoveFromCartForm(forms.Form):
    pass
3. Във urls.py
Увери се, че имаш следните маршрути:

from django.urls import path
from . import views

urlpatterns = [
    # ... останалите маршрути ...
    path('cart/update/<int:product_id>/', views.update_cart, name='update_cart'),
    path('cart/remove/<int:product_id>/', views.remove_from_cart, name='remove_from_cart'),
    path('cart/', views.cart_view, name='cart'),
]
4. В cart.txt (cart.html)
Вече имаш шаблон, който използва формите коректно.
Във view-то, което рендира количката, подавай речник с формите за всяко продуктче:

update_quantity_forms = {item.product.id: UpdateQuantityForm(initial={'quantity': item.quantity}) for item in cart_products}
И в шаблона:

<form method="post" action="{% url 'update_cart' item.product.id %}">
    {% csrf_token %}
    {{ update_quantity_forms[item.product.id].quantity }}
    <button ...>Обнови</button>
</form>
5. Ако искаш да мигрираш количката при логване
(т.е. ако анонимен потребител се логне, да се прехвърли количката му към неговия профил) – кажи, за да ти дам и тази логика.

6. Проверка дали всичко работи
Може да добавяш, обновяваш и премахваш продукти и като логнат, и като анонимен потребител.
При смяна на сесията (нов браузър/incognito) се създава нова количка.
При логнат потребител количката е обвързана с user.
Цялата помощна функция за директно копиране
def get_or_create_cart(request):
    if request.user.is_authenticated:
        cart, created = Cart.objects.get_or_create(user=request.user)
    else:
        session_id = request.session.session_key
        if not session_id:
            request.session.create()
            session_id = request.session.session_key
        cart, created = Cart.objects.get_or_create(session_id=session_id)
    return cart
Ако искаш, ще ти дам целия views.py с тези промени – кажи само!
Така ще имаш напълно работеща количка и за двата режима.

дай целия views +мигрираcия на количката при логване
Разбира се! Ето пълен примерен views.py за количка, която работи и с регистрирани потребители, и с анонимни (чрез сесия), включително автоматична миграция на количката при логване (когато анонимен потребител се логне, неговата количка се прехвърля към профила му).

1. Помощна функция за достъп до количката
# utils.py или най-горе във views.py
def get_or_create_cart(request):
    if request.user.is_authenticated:
        cart, created = Cart.objects.get_or_create(user=request.user)
    else:
        session_id = request.session.session_key
        if not session_id:
            request.session.create()
            session_id = request.session.session_key
        cart, created = Cart.objects.get_or_create(session_id=session_id)
    return cart
2. Views за количката
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login as auth_login
from django.contrib.auth.signals import user_logged_in
from django.dispatch import receiver
from .models import Cart, CartItem, Product
from .forms import UpdateQuantityForm, RemoveFromCartForm

def cart_view(request):
    cart = get_or_create_cart(request)
    cart_products = CartItem.objects.filter(cart=cart)
    total = sum(item.product.price * item.quantity for item in cart_products)
    update_quantity_forms = {item.product.id: UpdateQuantityForm(initial={'quantity': item.quantity}) for item in cart_products}
    remove_from_cart_form = RemoveFromCartForm()
    context = {
        'cart_products': cart_products,
        'total': total,
        'update_quantity_forms': update_quantity_forms,
        'remove_from_cart_form': remove_from_cart_form,
    }
    return render(request, 'cart.html', context)

def update_cart(request, product_id):
    cart = get_or_create_cart(request)
    product = get_object_or_404(Product, id=product_id)
    item = get_object_or_404(CartItem, cart=cart, product=product)
    if request.method == 'POST':
        form = UpdateQuantityForm(request.POST)
        if form.is_valid():
            quantity = form.cleaned_data['quantity']
            item.quantity = quantity
            item.save()
    return redirect('cart')

def remove_from_cart(request, product_id):
    cart = get_or_create_cart(request)
    product = get_object_or_404(Product, id=product_id)
    item = get_object_or_404(CartItem, cart=cart, product=product)
    if request.method == 'POST':
        form = RemoveFromCartForm(request.POST)
        if form.is_valid():
            item.delete()
    return redirect('cart')

def add_to_cart(request, product_id):
    cart = get_or_create_cart(request)
    product = get_object_or_404(Product, id=product_id)
    item, created = CartItem.objects.get_or_create(cart=cart, product=product)
    if not created:
        item.quantity += 1
        item.save()
    return redirect('cart')
3. Миграция на количката при логване
Вариант 1: Сигнал (най-универсално)
Добави това във views.py или signals.py (и го регистрирай в apps.py):

from django.contrib.auth.signals import user_logged_in

@receiver(user_logged_in)
def move_cart_on_login(sender, user, request, **kwargs):
    # Вземи количката по сесия (ако има)
    session_id = request.session.session_key
    if not session_id:
        return
    try:
        anon_cart = Cart.objects.get(session_id=session_id, user__isnull=True)
    except Cart.DoesNotExist:
        return
    # Вземи или създай количка за user
    user_cart, created = Cart.objects.get_or_create(user=user)
    # Премести всички продукти
    for item in anon_cart.cartitem_set.all():
        user_item, created = CartItem.objects.get_or_create(cart=user_cart, product=item.product)
        if not created:
            user_item.quantity += item.quantity
            user_item.save()
        else:
            user_item.quantity = item.quantity
            user_item.save()
    # Изтрий анонимната количка
    anon_cart.delete()
Това ще се изпълнява автоматично при логване!

Вариант 2: Ако искаш да го направиш ръчно във view за логване
Във view-то, което обработва логването (ако не ползваш Django auth views):

def login_view(request):
    # ... логика за логване ...
    auth_login(request, user)
    # Миграция на количката
    move_cart_on_login(None, user, request)
    return redirect('home')
4. urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('cart/', views.cart_view, name='cart'),
    path('cart/add/<int:product_id>/', views.add_to_cart, name='add_to_cart'),
    path('cart/update/<int:product_id>/', views.update_cart, name='update_cart'),
    path('cart/remove/<int:product_id>/', views.remove_from_cart, name='remove_from_cart'),
]
5. Важно за модела
Увери се, че Cart има:

user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True)
session_id = models.CharField(max_length=36, null=True, blank=True)
и че CartItem има ForeignKey към Cart.

6. Как работи всичко
Анонимен потребител: количката се пази по session_id.
Логнат потребител: количката се пази по user.
При логване: ако има количка по session_id, тя се слива с user количката (ако има), иначе се създава нова.
Всички изгледи работят с помощната функция get_or_create_cart(request).
7. Ако имаш forms.py
from django import forms

class UpdateQuantityForm(forms.Form):
    quantity = forms.IntegerField(min_value=1, label='Количество')

class RemoveFromCartForm(forms.Form):
    pass
8. Ако имаш нужда от signals.py
Може да преместиш сигнала там и да го регистрираш в apps.py на приложението си.

9. Ако имаш нужда от още примери (например за checkout), кажи!
Този код ще ти даде напълно работеща количка с миграция при логване – както за анонимни, така и за регистрирани потребители.
Ако имаш специфики в моделите или искаш да видиш и forms.py, models.py, дай знак!